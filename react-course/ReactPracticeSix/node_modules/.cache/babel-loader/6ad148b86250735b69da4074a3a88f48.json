{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/okhrimenkovladyslav/Desktop/IT/VladylenCourseReactJs/react-quiz/src/containers/Quiz/Quiz.js\";\nimport React, { Component } from 'react';\nimport classes from './Quiz.module.css';\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz';\n\nclass Quiz extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      quiz: [{\n        id: 1,\n        question: 'Сколько мне лет?',\n        answers: [{\n          text: 'До 18',\n          id: 1\n        }, {\n          text: 'От 18 до 25',\n          id: 2\n        }, {\n          text: 'От 25 до 35',\n          id: 3\n        }, {\n          text: 'После 35',\n          id: 4\n        }],\n        rightAnswer: 2\n      }, {\n        id: 2,\n        question: 'В каком году основали Сант-Петербург?',\n        answers: [{\n          text: '1700',\n          id: 1\n        }, {\n          text: '1705',\n          id: 2\n        }, {\n          text: '1703',\n          id: 3\n        }, {\n          text: '1803',\n          id: 4\n        }],\n        rightAnswer: 3\n      }],\n      activeQuestion: 0,\n      answerState: null,\n      // { [id]: 'success', 'error' }\n      isFinished: false,\n      results: {} // { [id]: 'success', 'error' }\n\n    };\n\n    this.onAnswerClickHandler = answerId => {\n      const question = this.state.quiz[this.state.activeQuestion];\n      const results = this.state.results; // Проверка совпадение правильного ответа с переходом и задержкой на новый вопрос\n\n      if (question.rightAnswer === answerId) {\n        // Проверка допущении ошибки при ответе на вопрос\n        if (!results[question.id]) {\n          results[question.id] = 'success'; // Если с первой попытки попадаем на правильный то результат в конце будет положителен\n        }\n\n        this.setState({\n          answerState: {\n            [answerId]: 'success'\n          },\n          results: results\n        });\n        const timeout = window.setTimeout(() => {\n          if (this.isQuizFinished()) {\n            this.setState({\n              isFinished: true\n            });\n            console.log('Finished is', this.state.isFinished);\n          } else {\n            this.setState({\n              activeQuestion: this.state.activeQuestion + 1,\n              answerState: null\n            });\n          }\n\n          window.clearTimeout(timeout);\n        }, 1000);\n      } else {\n        results[question.id] = 'error'; // Если при первой попытки ответ не правильный результат будет ошибочный\n\n        this.setState({\n          answerState: {\n            [answerId]: 'error'\n          },\n          results\n        });\n      } // Фикс бага двойной клик по правильному ответу, что приводит к переносу второго клика на новый (второй) вопрос\n\n\n      if (this.state.answerState) {\n        const key = Object.keys(this.state.answerState)[0];\n\n        if (this.state.answerState[key] === 'success') {\n          return;\n        }\n      }\n    };\n\n    this.retryHandler = () => {\n      this.setState({\n        activeQuestion: 0,\n        answerState: null,\n        inFinished: false,\n        results: {}\n      });\n    };\n  }\n\n  // Проверка количества вопросов из всего, return (true or false)\n  isQuizFinished() {\n    return this.state.activeQuestion + 1 === this.state.quiz.length;\n  } // Функция обнуление данных для прохождение теста заново\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Quiz,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.QuizWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u044C\\u0442\\u0435 \\u043D\\u0430 \\u0432\\u0441\\u0435 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), this.state.isFinished ? /*#__PURE__*/_jsxDEV(FinishedQuiz, {\n          results: this.state.results,\n          quiz: this.state.quiz,\n          onRetry: this.retryHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(ActiveQuiz, {\n          answers: this.state.quiz[this.state.activeQuestion].answers,\n          question: this.state.quiz[this.state.activeQuestion].question,\n          onAnswerClick: this.onAnswerClickHandler,\n          quizLength: this.state.quiz.length,\n          answerNumber: this.state.activeQuestion + 1,\n          state: this.state.answerState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/Users/okhrimenkovladyslav/Desktop/IT/VladylenCourseReactJs/react-quiz/src/containers/Quiz/Quiz.js"],"names":["React","Component","classes","ActiveQuiz","FinishedQuiz","Quiz","state","quiz","id","question","answers","text","rightAnswer","activeQuestion","answerState","isFinished","results","onAnswerClickHandler","answerId","setState","timeout","window","setTimeout","isQuizFinished","console","log","clearTimeout","key","Object","keys","retryHandler","inFinished","length","render","QuizWrapper"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport classes from './Quiz.module.css'\nimport ActiveQuiz from \"../../components/ActiveQuiz/ActiveQuiz\";\nimport FinishedQuiz from '../../components/FinishedQuiz/FinishedQuiz'\n\nclass Quiz extends Component {\n\n    state = {\n        quiz: [\n            {\n                id: 1,\n                question: 'Сколько мне лет?',\n                answers: [\n                    {text: 'До 18', id: 1},\n                    {text: 'От 18 до 25', id: 2},\n                    {text: 'От 25 до 35', id: 3},\n                    {text: 'После 35', id: 4}\n                ],\n                rightAnswer: 2\n            },\n            {\n                id: 2,\n                question: 'В каком году основали Сант-Петербург?',\n                answers: [\n                    {text: '1700', id: 1},\n                    {text: '1705', id: 2},\n                    {text: '1703', id: 3},\n                    {text: '1803', id: 4}\n                ],\n                rightAnswer: 3\n            }\n        ],\n        activeQuestion: 0,\n        answerState: null, // { [id]: 'success', 'error' }\n        isFinished: false,\n        results: {} // { [id]: 'success', 'error' }\n    }\n\n    onAnswerClickHandler = (answerId) => {\n        const question = this.state.quiz[this.state.activeQuestion]\n        const results = this.state.results\n\n        // Проверка совпадение правильного ответа с переходом и задержкой на новый вопрос\n        if (question.rightAnswer === answerId) {\n\n            // Проверка допущении ошибки при ответе на вопрос\n            if (!results[question.id]) {\n                results[question.id] = 'success' // Если с первой попытки попадаем на правильный то результат в конце будет положителен\n            }\n\n            this.setState({\n                answerState: {[answerId]: 'success'},\n                results: results\n            })\n\n            const timeout = window.setTimeout(() => {\n                if (this.isQuizFinished()) {\n                    this.setState({isFinished: true})\n                    console.log('Finished is', this.state.isFinished)\n                } else {\n                    this.setState({\n                        activeQuestion: this.state.activeQuestion + 1,\n                        answerState: null\n                    })\n                }\n                window.clearTimeout(timeout)\n            }, 1000)\n        } else {\n            results[question.id] = 'error' // Если при первой попытки ответ не правильный результат будет ошибочный\n            this.setState({\n                answerState: {[answerId]: 'error'},\n                results\n            })\n        }\n\n        // Фикс бага двойной клик по правильному ответу, что приводит к переносу второго клика на новый (второй) вопрос\n        if (this.state.answerState) {\n            const key = Object.keys(this.state.answerState)[0]\n            if (this.state.answerState[key] === 'success') {\n                return\n            }\n        }\n    }\n\n    // Проверка количества вопросов из всего, return (true or false)\n    isQuizFinished() {\n        return this.state.activeQuestion + 1 === this.state.quiz.length\n    }\n\n    // Функция обнуление данных для прохождение теста заново\n    retryHandler = () => {\n        this.setState({\n            activeQuestion: 0,\n            answerState: null,\n            inFinished: false,\n            results: {}\n        })\n    }\n\n    render() {\n        return (\n            <div className={classes.Quiz}>\n                <div className={classes.QuizWrapper}>\n                    <h1>Ответьте на все вопросы</h1>\n                    {\n                        this.state.isFinished\n                            ? <FinishedQuiz\n                                results={this.state.results}\n                                quiz={this.state.quiz}\n                                onRetry={this.retryHandler}\n                            />\n                            : <ActiveQuiz\n                                answers={this.state.quiz[this.state.activeQuestion].answers}\n                                question={this.state.quiz[this.state.activeQuestion].question}\n                                onAnswerClick={this.onAnswerClickHandler}\n                                quizLength={this.state.quiz.length}\n                                answerNumber={this.state.activeQuestion + 1}\n                                state={this.state.answerState}\n                            />\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Quiz"]},"metadata":{},"sourceType":"module"}